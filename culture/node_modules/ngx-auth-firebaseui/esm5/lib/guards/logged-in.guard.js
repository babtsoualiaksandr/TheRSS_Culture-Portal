import { __decorate, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';
import { map } from 'rxjs/operators';
import { NgxAuthFirebaseUIConfigToken } from '../tokens';
import { AuthProcessService } from '../services';
import * as i0 from "@angular/core";
import * as i1 from "../tokens/index";
import * as i2 from "@angular/router";
import * as i3 from "../services/auth-process.service";
var LoggedInGuard = /** @class */ (function () {
    function LoggedInGuard(config, router, authProcess) {
        this.config = config;
        this.router = router;
        this.authProcess = authProcess;
    }
    LoggedInGuard.prototype.canActivate = function (route, state) {
        var _this = this;
        return this.authProcess.afa.user.pipe(map(function (user) {
            if (user) {
                if (_this.config.guardProtectedRoutesUntilEmailIsVerified && !user.emailVerified && !user.isAnonymous) {
                    if (_this.config.authGuardFallbackURL) {
                        _this.router.navigate(["" + _this.config.authGuardFallbackURL], { queryParams: { redirectUrl: state.url } });
                    }
                    return false;
                }
                else {
                    return true;
                }
            }
            else {
                if (_this.config.authGuardFallbackURL) {
                    _this.router.navigate(["/" + _this.config.authGuardFallbackURL], { queryParams: { redirectUrl: state.url } });
                }
                return false;
            }
        }));
    };
    LoggedInGuard.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NgxAuthFirebaseUIConfigToken,] }] },
        { type: Router },
        { type: AuthProcessService }
    ]; };
    LoggedInGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoggedInGuard_Factory() { return new LoggedInGuard(i0.ɵɵinject(i1.NgxAuthFirebaseUIConfigToken), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AuthProcessService)); }, token: LoggedInGuard, providedIn: "root" });
    LoggedInGuard = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Inject(NgxAuthFirebaseUIConfigToken))
    ], LoggedInGuard);
    return LoggedInGuard;
}());
export { LoggedInGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VkLWluLmd1YXJkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWF1dGgtZmlyZWJhc2V1aS8iLCJzb3VyY2VzIjpbImxpYi9ndWFyZHMvbG9nZ2VkLWluLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsc0JBQXNCLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRWpHLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuQyxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdkQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sYUFBYSxDQUFDOzs7OztBQUsvQztJQUNFLHVCQUVVLE1BQStCLEVBQy9CLE1BQWMsRUFDZCxXQUErQjtRQUYvQixXQUFNLEdBQU4sTUFBTSxDQUF5QjtRQUMvQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO0lBRXpDLENBQUM7SUFFRCxtQ0FBVyxHQUFYLFVBQVksS0FBNkIsRUFBRSxLQUEwQjtRQUFyRSxpQkFvQkM7UUFuQkMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUNuQyxHQUFHLENBQUMsVUFBQSxJQUFJO1lBQ04sSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ3BHLElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRTt3QkFDcEMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsb0JBQXNCLENBQUMsRUFBRSxFQUFDLFdBQVcsRUFBRSxFQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFDLEVBQUMsQ0FBQyxDQUFDO3FCQUN4RztvQkFDRCxPQUFPLEtBQUssQ0FBQztpQkFDZDtxQkFBTTtvQkFDTCxPQUFPLElBQUksQ0FBQztpQkFDYjthQUNGO2lCQUFNO2dCQUNMLElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRTtvQkFDcEMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsb0JBQXNCLENBQUMsRUFBRSxFQUFDLFdBQVcsRUFBRSxFQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFDLEVBQUMsQ0FBQyxDQUFDO2lCQUN6RztnQkFDRCxPQUFPLEtBQUssQ0FBQzthQUNkO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7O2dEQTNCRSxNQUFNLFNBQUMsNEJBQTRCO2dCQUVwQixNQUFNO2dCQUNELGtCQUFrQjs7O0lBTDlCLGFBQWE7UUFIekIsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztRQUdHLFdBQUEsTUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUE7T0FGNUIsYUFBYSxDQThCekI7d0JBekNEO0NBeUNDLEFBOUJELElBOEJDO1NBOUJZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlLCBSb3V0ZXIsIFJvdXRlclN0YXRlU25hcHNob3R9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7Tmd4QXV0aEZpcmViYXNlVUlDb25maWd9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZ1Rva2VufSBmcm9tICcuLi90b2tlbnMnO1xuaW1wb3J0IHtBdXRoUHJvY2Vzc1NlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTG9nZ2VkSW5HdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZ1Rva2VuKVxuICAgIHByaXZhdGUgY29uZmlnOiBOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZyxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgYXV0aFByb2Nlc3M6IEF1dGhQcm9jZXNzU2VydmljZVxuICApIHtcbiAgfVxuXG4gIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmF1dGhQcm9jZXNzLmFmYS51c2VyLnBpcGUoXG4gICAgICBtYXAodXNlciA9PiB7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmd1YXJkUHJvdGVjdGVkUm91dGVzVW50aWxFbWFpbElzVmVyaWZpZWQgJiYgIXVzZXIuZW1haWxWZXJpZmllZCAmJiAhdXNlci5pc0Fub255bW91cykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmF1dGhHdWFyZEZhbGxiYWNrVVJMKSB7XG4gICAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtgJHt0aGlzLmNvbmZpZy5hdXRoR3VhcmRGYWxsYmFja1VSTH1gXSwge3F1ZXJ5UGFyYW1zOiB7cmVkaXJlY3RVcmw6IHN0YXRlLnVybH19KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5hdXRoR3VhcmRGYWxsYmFja1VSTCkge1xuICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW2AvJHt0aGlzLmNvbmZpZy5hdXRoR3VhcmRGYWxsYmFja1VSTH1gXSwge3F1ZXJ5UGFyYW1zOiB7cmVkaXJlY3RVcmw6IHN0YXRlLnVybH19KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==