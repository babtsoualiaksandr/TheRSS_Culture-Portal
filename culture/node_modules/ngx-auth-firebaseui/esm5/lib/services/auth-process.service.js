import { __awaiter, __decorate, __generator, __param } from "tslib";
import { EventEmitter, forwardRef, Inject, Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import { firebase } from '@firebase/app';
import '@firebase/auth';
import { tap } from 'rxjs/operators';
import { Accounts } from '../enums';
import { FirestoreSyncService } from './firestore-sync.service';
import { MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';
import { NgxAuthFirebaseUIConfigToken } from '../tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire/auth";
import * as i2 from "../tokens/index";
import * as i3 from "@angular/material/snack-bar";
import * as i4 from "./firestore-sync.service";
export var facebookAuthProvider = new firebase.auth.FacebookAuthProvider();
export var googleAuthProvider = new firebase.auth.GoogleAuthProvider();
export var appleAuthProvider = new firebase.auth.OAuthProvider('apple.com');
export var twitterAuthProvider = new firebase.auth.TwitterAuthProvider();
export var githubAuthProvider = new firebase.auth.GithubAuthProvider();
export var microsoftAuthProvider = new firebase.auth.OAuthProvider('microsoft.com');
export var yahooAuthProvider = new firebase.auth.OAuthProvider('yahoo.com');
export var AuthProvider;
(function (AuthProvider) {
    AuthProvider["ALL"] = "all";
    AuthProvider["ANONYMOUS"] = "anonymous";
    AuthProvider["EmailAndPassword"] = "firebase";
    AuthProvider["Google"] = "google";
    AuthProvider["Apple"] = "Apple";
    AuthProvider["Facebook"] = "facebook";
    AuthProvider["Twitter"] = "twitter";
    AuthProvider["Github"] = "github";
    AuthProvider["Microsoft"] = "microsoft";
    AuthProvider["Yahoo"] = "yahoo";
    AuthProvider["PhoneNumber"] = "phoneNumber";
})(AuthProvider || (AuthProvider = {}));
var AuthProcessService = /** @class */ (function () {
    function AuthProcessService(afa, config, snackBar, fireStoreService, matSnackBarConfig) {
        this.afa = afa;
        this.config = config;
        this.snackBar = snackBar;
        this.fireStoreService = fireStoreService;
        this.matSnackBarConfig = matSnackBarConfig;
        this.onSuccessEmitter = new EventEmitter();
        this.onErrorEmitter = new EventEmitter();
    }
    AuthProcessService.prototype.listenToUserEvents = function () {
        var _this = this;
        this.user$ = this.afa.user.pipe(tap(function (user) {
            _this.user = user;
        }));
    };
    /**
     * Reset the password of the ngx-auth-firebaseui-user via email
     *
     * @param email - the email to reset
     */
    AuthProcessService.prototype.resetPassword = function (email) {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        console.log('Password reset email sent');
                        return [4 /*yield*/, this.afa.auth.sendPasswordResetEmail(email)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_1 = _a.sent();
                        return [2 /*return*/, this.notifyError(error_1)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * General sign in mechanism to authenticate the users with a firebase project
     * using a traditional way, via username and password or by using an authentication provider
     * like google, facebook, twitter and github
     *
     * @param provider - the provider to authenticate with (google, facebook, twitter, github)
     * @param credentials
     */
    AuthProcessService.prototype.signInWith = function (provider, credentials) {
        return __awaiter(this, void 0, void 0, function () {
            var signInResult, _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 23, , 24]);
                        signInResult = void 0;
                        _a = provider;
                        switch (_a) {
                            case AuthProvider.ANONYMOUS: return [3 /*break*/, 1];
                            case AuthProvider.EmailAndPassword: return [3 /*break*/, 3];
                            case AuthProvider.Google: return [3 /*break*/, 5];
                            case AuthProvider.Apple: return [3 /*break*/, 7];
                            case AuthProvider.Facebook: return [3 /*break*/, 9];
                            case AuthProvider.Twitter: return [3 /*break*/, 11];
                            case AuthProvider.Github: return [3 /*break*/, 13];
                            case AuthProvider.Microsoft: return [3 /*break*/, 15];
                            case AuthProvider.Yahoo: return [3 /*break*/, 17];
                            case AuthProvider.PhoneNumber: return [3 /*break*/, 19];
                        }
                        return [3 /*break*/, 20];
                    case 1: return [4 /*yield*/, this.afa.auth.signInAnonymously()];
                    case 2:
                        signInResult = (_b.sent());
                        return [3 /*break*/, 21];
                    case 3: return [4 /*yield*/, this.afa.auth.signInWithEmailAndPassword(credentials.email, credentials.password)];
                    case 4:
                        signInResult = (_b.sent());
                        return [3 /*break*/, 21];
                    case 5: return [4 /*yield*/, this.afa.auth.signInWithPopup(googleAuthProvider)];
                    case 6:
                        signInResult = (_b.sent());
                        return [3 /*break*/, 21];
                    case 7: return [4 /*yield*/, this.afa.auth.signInWithPopup(appleAuthProvider)];
                    case 8:
                        signInResult = (_b.sent());
                        return [3 /*break*/, 21];
                    case 9: return [4 /*yield*/, this.afa.auth.signInWithPopup(facebookAuthProvider)];
                    case 10:
                        signInResult = (_b.sent());
                        return [3 /*break*/, 21];
                    case 11: return [4 /*yield*/, this.afa.auth.signInWithPopup(twitterAuthProvider)];
                    case 12:
                        signInResult = (_b.sent());
                        return [3 /*break*/, 21];
                    case 13: return [4 /*yield*/, this.afa.auth.signInWithPopup(githubAuthProvider)];
                    case 14:
                        signInResult = (_b.sent());
                        return [3 /*break*/, 21];
                    case 15: return [4 /*yield*/, this.afa.auth.signInWithPopup(microsoftAuthProvider)];
                    case 16:
                        signInResult = (_b.sent());
                        return [3 /*break*/, 21];
                    case 17: return [4 /*yield*/, this.afa.auth.signInWithPopup(yahooAuthProvider)];
                    case 18:
                        signInResult = (_b.sent());
                        return [3 /*break*/, 21];
                    case 19: 
                    // coming soon - see feature/sms branch
                    return [3 /*break*/, 21];
                    case 20: throw new Error(AuthProvider[provider] + " is not available as auth provider");
                    case 21: return [4 /*yield*/, this.handleSuccess(signInResult)];
                    case 22:
                        _b.sent();
                        return [3 /*break*/, 24];
                    case 23:
                        err_1 = _b.sent();
                        this.handleError(err_1);
                        return [3 /*break*/, 24];
                    case 24: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sign up new users via email and password.
     * After that the ngx-auth-firebaseui-user should verify and confirm an email sent via the firebase
     *
     * @param displayName - the displayName if the new ngx-auth-firebaseui-user
     * @returns -
     */
    AuthProcessService.prototype.signUp = function (displayName, credentials) {
        return __awaiter(this, void 0, void 0, function () {
            var userCredential, user, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 8, , 9]);
                        return [4 /*yield*/, this.afa.auth.createUserWithEmailAndPassword(credentials.email, credentials.password)];
                    case 1:
                        userCredential = _a.sent();
                        user = userCredential.user;
                        return [4 /*yield*/, this.updateProfile(displayName, user.photoURL)];
                    case 2:
                        _a.sent();
                        if (!this.config.enableFirestoreSync) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.fireStoreService
                                .getUserDocRefByUID(user.uid)
                                .set({
                                uid: user.uid,
                                displayName: displayName,
                                email: user.email,
                                photoURL: user.photoURL
                            })];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!this.config.enableEmailVerification) return [3 /*break*/, 6];
                        return [4 /*yield*/, user.sendEmailVerification()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        // Legacy fields
                        this.emailConfirmationSent = true;
                        this.emailToConfirm = credentials.email;
                        return [4 /*yield*/, this.handleSuccess(userCredential)];
                    case 7:
                        _a.sent();
                        return [3 /*break*/, 9];
                    case 8:
                        err_2 = _a.sent();
                        this.handleError(err_2);
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    AuthProcessService.prototype.sendNewVerificationEmail = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.user) {
                    return [2 /*return*/, Promise.reject(new Error('No signed in user'))];
                }
                return [2 /*return*/, this.user.sendEmailVerification()];
            });
        });
    };
    AuthProcessService.prototype.signOut = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.afa.auth.signOut()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_2 = _a.sent();
                        this.notifyError(error_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Update the profile (name + photo url) of the authenticated ngx-auth-firebaseui-user in the
     * firebase authentication feature (not in firestore)
     *
     * @param name - the new name of the authenticated ngx-auth-firebaseui-user
     * @param photoURL - the new photo url of the authenticated ngx-auth-firebaseui-user
     * @returns -
     */
    AuthProcessService.prototype.updateProfile = function (name, photoURL) {
        if (!photoURL) {
            return this.afa.auth.currentUser.updateProfile({ displayName: name });
        }
        else {
            return this.afa.auth.currentUser.updateProfile({ displayName: name, photoURL: photoURL });
        }
    };
    AuthProcessService.prototype.deleteAccount = function () {
        return this.afa.auth.currentUser.delete();
    };
    AuthProcessService.prototype.parseUserInfo = function (user) {
        return {
            uid: user.uid,
            displayName: user.displayName,
            email: user.email,
            phoneNumber: user.phoneNumber,
            photoURL: user.photoURL,
            providerId: user.providerData.length > 0 ? user.providerData[0].providerId : null
        };
    };
    AuthProcessService.prototype.getUserPhotoUrl = function () {
        var user = this.afa.auth.currentUser;
        if (!user) {
            return;
        }
        else if (user.photoURL) {
            return user.photoURL;
        }
        else if (user.emailVerified) {
            return this.getPhotoPath(Accounts.CHECK);
        }
        else if (user.isAnonymous) {
            return this.getPhotoPath(Accounts.OFF);
        }
        else {
            return this.getPhotoPath(Accounts.NONE);
        }
    };
    AuthProcessService.prototype.getPhotoPath = function (image) {
        return "assets/user/" + image + ".svg";
    };
    AuthProcessService.prototype.signInWithPhoneNumber = function () {
        // todo: 3.1.18
    };
    AuthProcessService.prototype.handleSuccess = function (userCredential) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, fallbackMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.onSuccessEmitter.next(userCredential.user);
                        if (!this.config.enableFirestoreSync) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.fireStoreService.updateUserData(this.parseUserInfo(userCredential.user))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.error("Error occurred while updating user data with firestore: " + e_1);
                        return [3 /*break*/, 4];
                    case 4:
                        if (this.config.toastMessageOnAuthSuccess) {
                            fallbackMessage = "Hello " + (userCredential.user.displayName ? userCredential.user.displayName : '') + "!";
                            this.showToast(this.messageOnAuthSuccess || fallbackMessage);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AuthProcessService.prototype.handleError = function (error) {
        this.notifyError(error);
        console.error(error);
    };
    // Refresh user info. Can be useful for instance to get latest status regarding email verification.
    AuthProcessService.prototype.reloadUserInfo = function () {
        return this.user.reload();
    };
    // Search for an error message.
    // Consumers of this library are given the possibility to provide a
    // function in case they want to instrument message based on error properties.
    AuthProcessService.prototype.getMessageOnAuthError = function (error) {
        // tslint:disable-next-line:no-bitwise
        return error.toString() || 'Sorry, something went wrong. Please retry later.';
    };
    // Show a toast using current snackbar config. If message is empty, no toast is displayed allowing to opt-out when needed.
    // Default MatSnackBarConfig has no duration, meaning it stays visible forever.
    // If that's the case, an action button is added to allow the end-user to dismiss the toast.
    AuthProcessService.prototype.showToast = function (message) {
        if (message) {
            this.snackBar.open(message, this.matSnackBarConfig.duration ? null : 'OK');
        }
    };
    AuthProcessService.prototype.showErrorToast = function (error) {
        if (this.config.toastMessageOnAuthError) {
            this.showToast(this.getMessageOnAuthError(error));
        }
    };
    AuthProcessService.prototype.notifyError = function (error) {
        this.onErrorEmitter.emit(error);
        this.showErrorToast(error);
    };
    AuthProcessService.ctorParameters = function () { return [
        { type: AngularFireAuth },
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgxAuthFirebaseUIConfigToken; }),] }] },
        { type: MatSnackBar },
        { type: FirestoreSyncService },
        { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }
    ]; };
    AuthProcessService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthProcessService_Factory() { return new AuthProcessService(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.NgxAuthFirebaseUIConfigToken), i0.ɵɵinject(i3.MatSnackBar), i0.ɵɵinject(i4.FirestoreSyncService), i0.ɵɵinject(i3.MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: AuthProcessService, providedIn: "root" });
    AuthProcessService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(1, Inject(forwardRef(function () { return NgxAuthFirebaseUIConfigToken; }))),
        __param(4, Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS))
    ], AuthProcessService);
    return AuthProcessService;
}());
export { AuthProcessService };
//# sourceMappingURL=data:application/json;base64,