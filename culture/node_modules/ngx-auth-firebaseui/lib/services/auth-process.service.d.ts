import { EventEmitter } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import '@firebase/auth';
import { User, UserInfo } from 'firebase/app';
import { Observable } from 'rxjs';
import { FirestoreSyncService } from './firestore-sync.service';
import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';
import { ICredentials, ISignInProcess, ISignUpProcess, NgxAuthFirebaseUIConfig } from '../interfaces';
import UserCredential = firebase.auth.UserCredential;
import * as ɵngcc0 from '@angular/core';
export declare const facebookAuthProvider: import("@firebase/auth-types").FacebookAuthProvider;
export declare const googleAuthProvider: import("@firebase/auth-types").GoogleAuthProvider;
export declare const appleAuthProvider: import("@firebase/auth-types").OAuthProvider;
export declare const twitterAuthProvider: import("@firebase/auth-types").TwitterAuthProvider;
export declare const githubAuthProvider: import("@firebase/auth-types").GithubAuthProvider;
export declare const microsoftAuthProvider: import("@firebase/auth-types").OAuthProvider;
export declare const yahooAuthProvider: import("@firebase/auth-types").OAuthProvider;
export declare enum AuthProvider {
    ALL = "all",
    ANONYMOUS = "anonymous",
    EmailAndPassword = "firebase",
    Google = "google",
    Apple = "Apple",
    Facebook = "facebook",
    Twitter = "twitter",
    Github = "github",
    Microsoft = "microsoft",
    Yahoo = "yahoo",
    PhoneNumber = "phoneNumber"
}
export declare class AuthProcessService implements ISignInProcess, ISignUpProcess {
    afa: AngularFireAuth;
    config: NgxAuthFirebaseUIConfig;
    private snackBar;
    private fireStoreService;
    private matSnackBarConfig;
    onSuccessEmitter: EventEmitter<any>;
    onErrorEmitter: EventEmitter<any>;
    user$: Observable<User>;
    user: User;
    messageOnAuthSuccess: string;
    messageOnAuthError: string;
    emailConfirmationSent: boolean;
    emailToConfirm: string;
    constructor(afa: AngularFireAuth, config: NgxAuthFirebaseUIConfig, snackBar: MatSnackBar, fireStoreService: FirestoreSyncService, matSnackBarConfig: MatSnackBarConfig);
    listenToUserEvents(): void;
    /**
     * Reset the password of the ngx-auth-firebaseui-user via email
     *
     * @param email - the email to reset
     */
    resetPassword(email: string): Promise<void>;
    /**
     * General sign in mechanism to authenticate the users with a firebase project
     * using a traditional way, via username and password or by using an authentication provider
     * like google, facebook, twitter and github
     *
     * @param provider - the provider to authenticate with (google, facebook, twitter, github)
     * @param credentials
     */
    signInWith(provider: AuthProvider, credentials?: ICredentials): Promise<void>;
    /**
     * Sign up new users via email and password.
     * After that the ngx-auth-firebaseui-user should verify and confirm an email sent via the firebase
     *
     * @param displayName - the displayName if the new ngx-auth-firebaseui-user
     * @returns -
     */
    signUp(displayName: string, credentials: ICredentials): Promise<void>;
    sendNewVerificationEmail(): Promise<void>;
    signOut(): Promise<void>;
    /**
     * Update the profile (name + photo url) of the authenticated ngx-auth-firebaseui-user in the
     * firebase authentication feature (not in firestore)
     *
     * @param name - the new name of the authenticated ngx-auth-firebaseui-user
     * @param photoURL - the new photo url of the authenticated ngx-auth-firebaseui-user
     * @returns -
     */
    updateProfile(name: string, photoURL: string): Promise<void>;
    deleteAccount(): Promise<any>;
    parseUserInfo(user: User): UserInfo;
    getUserPhotoUrl(): string;
    getPhotoPath(image: string): string;
    signInWithPhoneNumber(): void;
    handleSuccess(userCredential: UserCredential): Promise<void>;
    handleError(error: any): void;
    reloadUserInfo(): Promise<void>;
    getMessageOnAuthError(error: any): any;
    showToast(message: string): void;
    showErrorToast(error: any): void;
    notifyError(error: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthProcessService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1wcm9jZXNzLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYXV0aC1wcm9jZXNzLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtGQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVBdXRoIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZS9hdXRoJztcbmltcG9ydCAnQGZpcmViYXNlL2F1dGgnO1xuaW1wb3J0IHsgVXNlciwgVXNlckluZm8gfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRmlyZXN0b3JlU3luY1NlcnZpY2UgfSBmcm9tICcuL2ZpcmVzdG9yZS1zeW5jLnNlcnZpY2UnO1xuaW1wb3J0IHsgTWF0U25hY2tCYXIsIE1hdFNuYWNrQmFyQ29uZmlnIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc25hY2stYmFyJztcbmltcG9ydCB7IElDcmVkZW50aWFscywgSVNpZ25JblByb2Nlc3MsIElTaWduVXBQcm9jZXNzLCBOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZyB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IFVzZXJDcmVkZW50aWFsID0gZmlyZWJhc2UuYXV0aC5Vc2VyQ3JlZGVudGlhbDtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGZhY2Vib29rQXV0aFByb3ZpZGVyOiBpbXBvcnQoXCJAZmlyZWJhc2UvYXV0aC10eXBlc1wiKS5GYWNlYm9va0F1dGhQcm92aWRlcjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGdvb2dsZUF1dGhQcm92aWRlcjogaW1wb3J0KFwiQGZpcmViYXNlL2F1dGgtdHlwZXNcIikuR29vZ2xlQXV0aFByb3ZpZGVyO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgYXBwbGVBdXRoUHJvdmlkZXI6IGltcG9ydChcIkBmaXJlYmFzZS9hdXRoLXR5cGVzXCIpLk9BdXRoUHJvdmlkZXI7XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d2l0dGVyQXV0aFByb3ZpZGVyOiBpbXBvcnQoXCJAZmlyZWJhc2UvYXV0aC10eXBlc1wiKS5Ud2l0dGVyQXV0aFByb3ZpZGVyO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgZ2l0aHViQXV0aFByb3ZpZGVyOiBpbXBvcnQoXCJAZmlyZWJhc2UvYXV0aC10eXBlc1wiKS5HaXRodWJBdXRoUHJvdmlkZXI7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBtaWNyb3NvZnRBdXRoUHJvdmlkZXI6IGltcG9ydChcIkBmaXJlYmFzZS9hdXRoLXR5cGVzXCIpLk9BdXRoUHJvdmlkZXI7XG5leHBvcnQgZGVjbGFyZSBjb25zdCB5YWhvb0F1dGhQcm92aWRlcjogaW1wb3J0KFwiQGZpcmViYXNlL2F1dGgtdHlwZXNcIikuT0F1dGhQcm92aWRlcjtcbmV4cG9ydCBkZWNsYXJlIGVudW0gQXV0aFByb3ZpZGVyIHtcbiAgICBBTEwgPSBcImFsbFwiLFxuICAgIEFOT05ZTU9VUyA9IFwiYW5vbnltb3VzXCIsXG4gICAgRW1haWxBbmRQYXNzd29yZCA9IFwiZmlyZWJhc2VcIixcbiAgICBHb29nbGUgPSBcImdvb2dsZVwiLFxuICAgIEFwcGxlID0gXCJBcHBsZVwiLFxuICAgIEZhY2Vib29rID0gXCJmYWNlYm9va1wiLFxuICAgIFR3aXR0ZXIgPSBcInR3aXR0ZXJcIixcbiAgICBHaXRodWIgPSBcImdpdGh1YlwiLFxuICAgIE1pY3Jvc29mdCA9IFwibWljcm9zb2Z0XCIsXG4gICAgWWFob28gPSBcInlhaG9vXCIsXG4gICAgUGhvbmVOdW1iZXIgPSBcInBob25lTnVtYmVyXCJcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF1dGhQcm9jZXNzU2VydmljZSBpbXBsZW1lbnRzIElTaWduSW5Qcm9jZXNzLCBJU2lnblVwUHJvY2VzcyB7XG4gICAgYWZhOiBBbmd1bGFyRmlyZUF1dGg7XG4gICAgY29uZmlnOiBOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZztcbiAgICBwcml2YXRlIHNuYWNrQmFyO1xuICAgIHByaXZhdGUgZmlyZVN0b3JlU2VydmljZTtcbiAgICBwcml2YXRlIG1hdFNuYWNrQmFyQ29uZmlnO1xuICAgIG9uU3VjY2Vzc0VtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRXJyb3JFbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB1c2VyJDogT2JzZXJ2YWJsZTxVc2VyPjtcbiAgICB1c2VyOiBVc2VyO1xuICAgIG1lc3NhZ2VPbkF1dGhTdWNjZXNzOiBzdHJpbmc7XG4gICAgbWVzc2FnZU9uQXV0aEVycm9yOiBzdHJpbmc7XG4gICAgZW1haWxDb25maXJtYXRpb25TZW50OiBib29sZWFuO1xuICAgIGVtYWlsVG9Db25maXJtOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoYWZhOiBBbmd1bGFyRmlyZUF1dGgsIGNvbmZpZzogTmd4QXV0aEZpcmViYXNlVUlDb25maWcsIHNuYWNrQmFyOiBNYXRTbmFja0JhciwgZmlyZVN0b3JlU2VydmljZTogRmlyZXN0b3JlU3luY1NlcnZpY2UsIG1hdFNuYWNrQmFyQ29uZmlnOiBNYXRTbmFja0JhckNvbmZpZyk7XG4gICAgbGlzdGVuVG9Vc2VyRXZlbnRzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIHBhc3N3b3JkIG9mIHRoZSBuZ3gtYXV0aC1maXJlYmFzZXVpLXVzZXIgdmlhIGVtYWlsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZW1haWwgLSB0aGUgZW1haWwgdG8gcmVzZXRcbiAgICAgKi9cbiAgICByZXNldFBhc3N3b3JkKGVtYWlsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEdlbmVyYWwgc2lnbiBpbiBtZWNoYW5pc20gdG8gYXV0aGVudGljYXRlIHRoZSB1c2VycyB3aXRoIGEgZmlyZWJhc2UgcHJvamVjdFxuICAgICAqIHVzaW5nIGEgdHJhZGl0aW9uYWwgd2F5LCB2aWEgdXNlcm5hbWUgYW5kIHBhc3N3b3JkIG9yIGJ5IHVzaW5nIGFuIGF1dGhlbnRpY2F0aW9uIHByb3ZpZGVyXG4gICAgICogbGlrZSBnb29nbGUsIGZhY2Vib29rLCB0d2l0dGVyIGFuZCBnaXRodWJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm92aWRlciAtIHRoZSBwcm92aWRlciB0byBhdXRoZW50aWNhdGUgd2l0aCAoZ29vZ2xlLCBmYWNlYm9vaywgdHdpdHRlciwgZ2l0aHViKVxuICAgICAqIEBwYXJhbSBjcmVkZW50aWFsc1xuICAgICAqL1xuICAgIHNpZ25JbldpdGgocHJvdmlkZXI6IEF1dGhQcm92aWRlciwgY3JlZGVudGlhbHM/OiBJQ3JlZGVudGlhbHMpOiBQcm9taXNlPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIFNpZ24gdXAgbmV3IHVzZXJzIHZpYSBlbWFpbCBhbmQgcGFzc3dvcmQuXG4gICAgICogQWZ0ZXIgdGhhdCB0aGUgbmd4LWF1dGgtZmlyZWJhc2V1aS11c2VyIHNob3VsZCB2ZXJpZnkgYW5kIGNvbmZpcm0gYW4gZW1haWwgc2VudCB2aWEgdGhlIGZpcmViYXNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGlzcGxheU5hbWUgLSB0aGUgZGlzcGxheU5hbWUgaWYgdGhlIG5ldyBuZ3gtYXV0aC1maXJlYmFzZXVpLXVzZXJcbiAgICAgKiBAcmV0dXJucyAtXG4gICAgICovXG4gICAgc2lnblVwKGRpc3BsYXlOYW1lOiBzdHJpbmcsIGNyZWRlbnRpYWxzOiBJQ3JlZGVudGlhbHMpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNlbmROZXdWZXJpZmljYXRpb25FbWFpbCgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNpZ25PdXQoKTogUHJvbWlzZTx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHByb2ZpbGUgKG5hbWUgKyBwaG90byB1cmwpIG9mIHRoZSBhdXRoZW50aWNhdGVkIG5neC1hdXRoLWZpcmViYXNldWktdXNlciBpbiB0aGVcbiAgICAgKiBmaXJlYmFzZSBhdXRoZW50aWNhdGlvbiBmZWF0dXJlIChub3QgaW4gZmlyZXN0b3JlKVxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgLSB0aGUgbmV3IG5hbWUgb2YgdGhlIGF1dGhlbnRpY2F0ZWQgbmd4LWF1dGgtZmlyZWJhc2V1aS11c2VyXG4gICAgICogQHBhcmFtIHBob3RvVVJMIC0gdGhlIG5ldyBwaG90byB1cmwgb2YgdGhlIGF1dGhlbnRpY2F0ZWQgbmd4LWF1dGgtZmlyZWJhc2V1aS11c2VyXG4gICAgICogQHJldHVybnMgLVxuICAgICAqL1xuICAgIHVwZGF0ZVByb2ZpbGUobmFtZTogc3RyaW5nLCBwaG90b1VSTDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgICBkZWxldGVBY2NvdW50KCk6IFByb21pc2U8YW55PjtcbiAgICBwYXJzZVVzZXJJbmZvKHVzZXI6IFVzZXIpOiBVc2VySW5mbztcbiAgICBnZXRVc2VyUGhvdG9VcmwoKTogc3RyaW5nO1xuICAgIGdldFBob3RvUGF0aChpbWFnZTogc3RyaW5nKTogc3RyaW5nO1xuICAgIHNpZ25JbldpdGhQaG9uZU51bWJlcigpOiB2b2lkO1xuICAgIGhhbmRsZVN1Y2Nlc3ModXNlckNyZWRlbnRpYWw6IFVzZXJDcmVkZW50aWFsKTogUHJvbWlzZTx2b2lkPjtcbiAgICBoYW5kbGVFcnJvcihlcnJvcjogYW55KTogdm9pZDtcbiAgICByZWxvYWRVc2VySW5mbygpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGdldE1lc3NhZ2VPbkF1dGhFcnJvcihlcnJvcjogYW55KTogYW55O1xuICAgIHNob3dUb2FzdChtZXNzYWdlOiBzdHJpbmcpOiB2b2lkO1xuICAgIHNob3dFcnJvclRvYXN0KGVycm9yOiBhbnkpOiB2b2lkO1xuICAgIG5vdGlmeUVycm9yKGVycm9yOiBhbnkpOiB2b2lkO1xufVxuIl19